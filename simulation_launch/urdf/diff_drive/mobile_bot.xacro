<?xml version="1.0"?>
<robot name="mobile_bot" xmlns:xacro="http://ros.org/wiki/xacro">
    <!-- Define robot constants -->
    <xacro:property name="base_radius" value="0.20"/>
    <xacro:property name="base_height" value="0.30"/>

    <xacro:property name="wheel_radius" value="0.07"/>
    <xacro:property name="wheel_width" value="0.04"/>
    <xacro:property name="wheel_zoff" value="0.12"/>

    <xacro:property name="caster_radius" value="0.035"/>
    <xacro:property name="caster_xoff" value="${base_radius-caster_radius}"/>

    <xacro:property name="imu_size" value="0.1"/>
    <xacro:property name="lidar_radius" value="0.1"/>
    <xacro:property name="lidar_height" value="0.07"/>

    <xacro:property name="camera_size" value="0.05"/>

    <!-- Define intertial property macros -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
            <mass value="${m}"/>
            <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <!-- Robot Base -->
    <link name="base_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="${base_radius}" length="${base_height}"/>
            </geometry>
            <material name="Cyan">
                <color rgba="0 1.0 1.0 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="${base_radius}" length="${base_height}"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertia m="5" r="${base_radius}" h="${base_height}"/>
    </link>

    <!-- Robot Footprint -->
    <link name="base_footprint">
        <origin xyz="0 0 0"/>
    </link>

    <joint name="base_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0 0 ${wheel_zoff+wheel_radius}" rpy="0 0 0"/>
    </joint>

    <!-- Drive Wheels -->
    <xacro:macro name="drive_wheel" params="prefix y_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="Gray">
                <color rgba="0.5 0.5 0.5 1.0"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>
            <xacro:cylinder_inertia m="2" r="${wheel_radius}" h="${wheel_width}"/>
        </link>

        <joint name="${prefix}_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${prefix}_link"/>
            <origin xyz="0 ${y_reflect*(base_radius+(wheel_width/2))} ${-wheel_zoff}" rpy="0 0 0"/>
            <axis xyz="0 1 0"/>
        </joint>
    </xacro:macro>

    <xacro:drive_wheel prefix="drive_wheel_l" y_reflect="1.0" />
    <xacro:drive_wheel prefix="drive_wheel_r" y_reflect="-1.0"/>

    <!-- Caster Wheel -->
    <xacro:macro name="caster_wheel" params="prefix x_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <sphere radius="${caster_radius}"/>
                </geometry>
                <material name="Cyan">
                    <color rgba="0 1.0 1.0 1.0"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <sphere radius="${caster_radius}"/>
                </geometry>
            </collision>

            <xacro:sphere_inertia m="2" r="${caster_radius}"/>
        </link>
        
        <gazebo reference="${prefix}_link">
            <mu1 value="0"/>
            <mu2 value="0"/>
        </gazebo>

        <joint name="${prefix}_joint" type="fixed">
            <parent link="base_link"/>
            <child link="${prefix}_link"/>
            <origin xyz="${x_reflect*caster_xoff} 0 ${caster_radius-wheel_radius-wheel_zoff}" rpy="0 0 0"/>
        </joint>
    </xacro:macro>

    <xacro:caster_wheel prefix="caster_wheel_f" x_reflect="1.0"/>
    <xacro:caster_wheel prefix="caster_wheel_b" x_reflect="-1.0"/>
    
    <!-- Imu Plugin Set Up -->
    <link name="imu_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${imu_size} ${imu_size} ${imu_size}"/>
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${imu_size} ${imu_size} ${imu_size}"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="0.1" w="${imu_size}" d="${imu_size}" h="${imu_size}"/>
    </link>

    <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="0 0 0"/>
    </joint>

    <gazebo reference="imu_link">
        <sensor name="imu_sensor" type="imu">
            <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
                <ros>
                    <remapping>~/out:=imu</remapping>
                </ros>
                <initial_orientation_as_reference>false</initial_orientation_as_reference>
            </plugin>
            <always_on>true</always_on>
            <update_rate>100</update_rate>
            <visualize>true</visualize>
            <imu>
                <angular_velocity>
                    <x>
                        <noise type="gaussian">
                        <mean>0.0</mean>
                        <stddev>2e-4</stddev>
                        <bias_mean>0.0000075</bias_mean>
                        <bias_stddev>0.0000008</bias_stddev>
                        </noise>
                    </x>
                    <y>
                        <noise type="gaussian">
                        <mean>0.0</mean>
                        <stddev>2e-4</stddev>
                        <bias_mean>0.0000075</bias_mean>
                        <bias_stddev>0.0000008</bias_stddev>
                        </noise>
                    </y>
                    <z>
                        <noise type="gaussian">
                        <mean>0.0</mean>
                        <stddev>2e-4</stddev>
                        <bias_mean>0.0000075</bias_mean>
                        <bias_stddev>0.0000008</bias_stddev>
                        </noise>
                    </z>
                </angular_velocity>
                <linear_acceleration>
                    <x>
                        <noise type="gaussian">
                        <mean>0.0</mean>
                        <stddev>1.7e-2</stddev>
                        <bias_mean>0.1</bias_mean>
                        <bias_stddev>0.001</bias_stddev>
                        </noise>
                    </x>
                    <y>
                        <noise type="gaussian">
                        <mean>0.0</mean>
                        <stddev>1.7e-2</stddev>
                        <bias_mean>0.1</bias_mean>
                        <bias_stddev>0.001</bias_stddev>
                        </noise>
                    </y>
                    <z>
                        <noise type="gaussian">
                        <mean>0.0</mean>
                        <stddev>1.7e-2</stddev>
                        <bias_mean>0.1</bias_mean>
                        <bias_stddev>0.001</bias_stddev>
                        </noise>
                    </z>
                </linear_acceleration>
            </imu>
        </sensor>
    </gazebo>

    <gazebo>
        <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
            <update_rate>30</update_rate>

            <!-- wheels -->
            <left_joint>drive_wheel_l_joint</left_joint>
            <right_joint>drive_wheel_r_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>0.35</wheel_separation>
            <wheel_diameter>0.2</wheel_diameter>

            <!-- limits -->
            <max_wheel_torque>20</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>

            <!-- input -->
            <!-- subscribe to the /cmd_vel topic-->
            <command_topic>cmd_vel</command_topic>

            <!-- output -->
            <!-- When true, publish wheel odometry information -->
            <publish_odom>true</publish_odom>

            <!-- When true, publish coordinate transform from odom to base_footprint -->
            <!-- The robot localization package will publish this information -->
            <publish_odom_tf>false</publish_odom_tf>
            
            <!-- When true, publish coordinate transform from base_link to the wheels -->
            <!-- The robot_state_publisher package is often used to publish this transform --> 
            <!-- There will be a warning if both the robot state publisher and the differential drive package publishes the wheel transform (one of them will be ignored) -->
            <publish_wheel_tf>true</publish_wheel_tf>

            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_footprint</robot_base_frame>
        </plugin>
    </gazebo>
     
    <link name="lidar_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_height}"/>
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_height}"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertia m="0.1" r="${lidar_radius}" h="${lidar_height}"/>
    </link>

    <joint name="lidar_joint" type="fixed">
        <parent link="base_link"/>
        <child link="lidar_link"/>
        <origin xyz="0 0 ${(base_height/2)+(lidar_height/2)}" rpy="0 0 0"/>
    </joint>

    <gazebo reference="lidar_link">
        <sensor name="lidar" type="ray">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <update_rate>5</update_rate>
        <ray>
            <scan>
            <horizontal>
                <samples>360</samples>
                <resolution>1.000000</resolution>
                <min_angle>0.000000</min_angle>
                <max_angle>6.280000</max_angle>
            </horizontal>
            </scan>
            <range>
            <min>0.120000</min>
            <max>6.0</max>
            <resolution>0.015000</resolution>
            </range>
            <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
            </noise>
        </ray>
        <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
            <ros>
            <remapping>~/out:=scan</remapping>
            </ros>
            <output_type>sensor_msgs/LaserScan</output_type>
            <frame_name>lidar_link</frame_name>
        </plugin>
        </sensor>
    </gazebo>

    <link name="camera_link">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <visual>
            <geometry>
                <box size="${camera_size} ${camera_size} ${camera_size}"/>
            </geometry>
            <material name="Red">
                <color rgba="1.0 0 0 1.0"/>
            </material>
        </visual>
        <collision>
            <geometry>
                <box size="${camera_size} ${camera_size} ${camera_size}"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="0.1" w="${camera_size}" h="${camera_size}" d="${camera_size}"/>
    </link>
    <joint name="camera_j" type="fixed">
        <parent link="base_link"/>
        <child link="camera_link"/>
        <origin xyz="${base_radius} 0 ${base_height/2}" rpy="0 0 0"/>
    </joint>
    <link name="camera_optical_link"/>
    <joint name="camera_optical_j" type="fixed">
        <parent link="camera_link"/>
        <child link="camera_optical_link"/>
        <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    </joint>

    <gazebo reference="camera_link">
        <material>Gazebo/Red</material>
        <sensor name="camera" type="camera">
            <always_on>1</always_on>
            <update_rate>30</update_rate>
            <visualize>true</visualize>
            <camera>
                <image>
                    <width>320</width>
                    <height>320</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.05</near>
                    <far>50.0</far>
                </clip>
            </camera>
            <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
                <frame_name>camera_link</frame_name>
            </plugin>
        </sensor>
    </gazebo>
</robot>