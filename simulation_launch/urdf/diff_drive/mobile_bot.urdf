<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from mobile_bot.xacro               | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="mobile_bot">
  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.3" radius="0.2"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.3" radius="0.2"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="5"/>
      <inertia ixx="0.08750000000000001" ixy="0" ixz="0" iyy="0.08750000000000001" iyz="0" izz="0.10000000000000002"/>
    </inertial>
  </link>
  <!-- Robot Footprint -->
  <link name="base_footprint">
    <origin xyz="0 0 0"/>
  </link>
  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.19"/>
  </joint>
  <link name="drive_wheel_l_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.07"/>
      </geometry>
      <material name="Gray">
        <color rgba="0.5 0.5 0.5 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.07"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="2"/>
      <inertia ixx="0.0027166666666666667" ixy="0" ixz="0" iyy="0.0027166666666666667" iyz="0" izz="0.004900000000000001"/>
    </inertial>
  </link>
  <joint name="drive_wheel_l_joint" type="continuous">
    <parent link="base_link"/>
    <child link="drive_wheel_l_link"/>
    <origin rpy="0 0 0" xyz="0 0.22 -0.12"/>
    <axis xyz="0 1 0"/>
  </joint>
  <link name="drive_wheel_r_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.07"/>
      </geometry>
      <material name="Gray">
        <color rgba="0.5 0.5 0.5 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.04" radius="0.07"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="2"/>
      <inertia ixx="0.0027166666666666667" ixy="0" ixz="0" iyy="0.0027166666666666667" iyz="0" izz="0.004900000000000001"/>
    </inertial>
  </link>
  <joint name="drive_wheel_r_joint" type="continuous">
    <parent link="base_link"/>
    <child link="drive_wheel_r_link"/>
    <origin rpy="0 0 0" xyz="0 -0.22 -0.12"/>
    <axis xyz="0 1 0"/>
  </joint>
  <link name="caster_wheel_f_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.035"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.035"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="2"/>
      <inertia ixx="0.0009800000000000002" ixy="0.0" ixz="0.0" iyy="0.0009800000000000002" iyz="0.0" izz="0.0009800000000000002"/>
    </inertial>
  </link>
  <gazebo reference="caster_wheel_f_link">
    <mu1 value="0"/>
    <mu2 value="0"/>
  </gazebo>
  <joint name="caster_wheel_f_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_wheel_f_link"/>
    <origin rpy="0 0 0" xyz="0.165 0 -0.155"/>
  </joint>
  <link name="caster_wheel_b_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.035"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.035"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="2"/>
      <inertia ixx="0.0009800000000000002" ixy="0.0" ixz="0.0" iyy="0.0009800000000000002" iyz="0.0" izz="0.0009800000000000002"/>
    </inertial>
  </link>
  <gazebo reference="caster_wheel_b_link">
    <mu1 value="0"/>
    <mu2 value="0"/>
  </gazebo>
  <joint name="caster_wheel_b_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_wheel_b_link"/>
    <origin rpy="0 0 0" xyz="-0.165 0 -0.155"/>
  </joint>
  <!-- Imu Plugin Set Up -->
  <link name="imu_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.0001666666666666667" ixy="0.0" ixz="0.0" iyy="0.0001666666666666667" iyz="0.0" izz="0.0001666666666666667"/>
    </inertial>
  </link>
  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 0"/>
  </joint>
  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="diff_drive">
      <update_rate>30</update_rate>
      <!-- wheels -->
      <left_joint>drive_wheel_l_joint</left_joint>
      <right_joint>drive_wheel_r_joint</right_joint>
      <!-- kinematics -->
      <wheel_separation>0.35</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>
      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>
      <!-- input -->
      <!-- subscribe to the /cmd_vel topic-->
      <command_topic>cmd_vel</command_topic>
      <!-- output -->
      <!-- When true, publish wheel odometry information -->
      <publish_odom>true</publish_odom>
      <!-- When true, publish coordinate transform from odom to base_footprint -->
      <!-- The robot localization package will publish this information -->
      <publish_odom_tf>false</publish_odom_tf>
      <!-- When true, publish coordinate transform from base_link to the wheels -->
      <!-- The robot_state_publisher package is often used to publish this transform -->
      <!-- There will be a warning if both the robot state publisher and the differential drive package publishes the wheel transform (one of them will be ignored) -->
      <publish_wheel_tf>true</publish_wheel_tf>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>
    </plugin>
  </gazebo>
  <link name="lidar_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.1"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.1"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.0002908333333333334" ixy="0" ixz="0" iyy="0.0002908333333333334" iyz="0" izz="0.0005000000000000001"/>
    </inertial>
  </link>
  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.185"/>
  </joint>
  <gazebo reference="lidar_link">
    <sensor name="lidar" type="ray">
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1.000000</resolution>
            <min_angle>0.000000</min_angle>
            <max_angle>6.280000</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.120000</min>
          <max>6.0</max>
          <resolution>0.015000</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_ray_sensor.so" name="scan">
        <ros>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
  <link name="camera_link">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="Red">
        <color rgba="1.0 0 0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="4.166666666666667e-05" ixy="0.0" ixz="0.0" iyy="4.166666666666667e-05" iyz="0.0" izz="4.166666666666667e-05"/>
    </inertial>
  </link>
  <joint name="camera_j" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin rpy="0 0 0" xyz="0.2 0 0.15"/>
  </joint>
  <link name="camera_optical_link"/>
  <joint name="camera_optical_j" type="fixed">
    <parent link="camera_link"/>
    <child link="camera_optical_link"/>
    <origin rpy="-1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0"/>
  </joint>
  <gazebo reference="camera_link">
    <material>Gazebo/Red</material>
    <sensor name="camera" type="camera">
      <always_on>1</always_on>
      <update_rate>30</update_rate>
      <visualize>true</visualize>
      <camera>
        <image>
          <width>320</width>
          <height>320</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>50.0</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <frame_name>camera_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
</robot>
