<?xml version="1.0"?>
<robot name="mobile_bot" xmlns:xacro="http://ros.org/wiki/xacro">
    <!-- Define robot constants -->
    <xacro:property name="base_radius" value="0.20"/>
    <xacro:property name="base_height" value="0.10"/>
    <xacro:property name="base_weight" value="5"/>
    
    <xacro:property name="wheel_radius" value="0.05"/>
    <xacro:property name="wheel_width" value="0.03"/>
    <xacro:property name="wheel_zoff" value="0.02"/>
    <xacro:property name="wheel_weight" value="2"/>

    <xacro:property name="imu_size" value="0.05"/>
    <xacro:property name="imu_weight" value="0.0001"/>

    <xacro:property name="lidar_radius" value="0.07"/>
    <xacro:property name="lidar_height" value="0.02"/>
    <xacro:property name="lidar_weight" value="0.0001"/>

    <!-- Define intertial property macros -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <!-- Robot Footprint -->
    <link name="base_footprint">
        <origin xyz="0 0 0"/>
    </link>

    <!-- Base Link -->
    <link name="base_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="${base_radius}" length="${base_height}"/>
            </geometry>
            <material name="Cyan">
                <color rgba="0 1.0 1.0 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="${base_radius}" length="${base_height}"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertia m="${base_weight}" r="${base_radius}" h="${base_height}"/>
    </link>

    <joint name="base_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0 0 ${wheel_radius+wheel_zoff}" rpy="0 0 0"/>
    </joint>

    <!-- Drive Wheels -->
    <xacro:macro name="drive_wheel" params="prefix distance angle">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="Gray">
                <color rgba="0.5 0.5 0.5 1.0"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
                <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>
            <xacro:cylinder_inertia m="${wheel_weight}" r="${wheel_radius}" h="${wheel_width}"/>
        </link>

        <joint name="${prefix}_joint" type="fixed">
            <parent link="base_link"/>
            <child link="${prefix}_link"/>
            <origin xyz="${distance*cos(angle)} ${distance*sin(angle)} ${-wheel_zoff}" rpy="0 0 ${angle}"/>
            <axis xyz="0 0 0"/>
        </joint>

        <gazebo reference="${prefix}_link">
            <collision>
                <friction>
                    <ode>
                        <mu>0.0</mu>
                        <mu2>0.0</mu2>
                    </ode>
                </friction>
            </collision>
        </gazebo>
    </xacro:macro>

    <xacro:drive_wheel prefix="drive_wheel_0" distance="${base_radius+wheel_width/2}" angle="0.0"/>
    <xacro:drive_wheel prefix="drive_wheel_120" distance="${base_radius+wheel_width/2}" angle="${2*pi/3}"/>
    <xacro:drive_wheel prefix="drive_wheel_180" distance="${base_radius+wheel_width/2}" angle="${4*pi/3}"/>
    
    <!-- IMU -->
    <link name="imu_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${imu_size} ${imu_size} ${imu_size}"/>
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${imu_size} ${imu_size} ${imu_size}"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="${imu_weight}" w="${imu_size}" d="${imu_size}" h="${imu_size}"/>
    </link>

    <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="0 0 0"/>
    </joint>

    <gazebo reference="imu_link">
        <sensor name="imu_sensor" type="imu">
            <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
                <ros>
                    <remapping>~/out:=imu</remapping>
                </ros>
                <initial_orientation_as_reference>false</initial_orientation_as_reference>
            </plugin>
            <always_on>true</always_on>
            <update_rate>100</update_rate>
            <visualize>true</visualize>
            <imu>
                <angular_velocity>
                    <x>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                            <bias_mean>0.0000075</bias_mean>
                            <bias_stddev>0.0000008</bias_stddev>
                        </noise>
                    </x>
                    <y>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                            <bias_mean>0.0000075</bias_mean>
                            <bias_stddev>0.0000008</bias_stddev>
                        </noise>
                    </y>
                    <z>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                            <bias_mean>0.0000075</bias_mean>
                            <bias_stddev>0.0000008</bias_stddev>
                        </noise>
                    </z>
                </angular_velocity>
                <linear_acceleration>
                    <x>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                            <bias_mean>0.1</bias_mean>
                            <bias_stddev>0.001</bias_stddev>
                        </noise>
                    </x>
                    <y>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                            <bias_mean>0.1</bias_mean>
                            <bias_stddev>0.001</bias_stddev>
                        </noise>
                    </y>
                    <z>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                            <bias_mean>0.1</bias_mean>
                            <bias_stddev>0.001</bias_stddev>
                        </noise>
                    </z>
                </linear_acceleration>
            </imu>
        </sensor>
    </gazebo>

    <!-- Lidar -->
    <link name="lidar_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_height}"/>
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_height}"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertia m="${lidar_weight}" r="${lidar_radius}" h="${lidar_height}"/>
    </link>

    <joint name="lidar_joint" type="fixed">
        <parent link="base_link"/>
        <child link="lidar_link"/>
        <origin xyz="0 0 ${(base_height/2)+(lidar_height/2)}" rpy="0 0 0"/>
    </joint>

    <gazebo reference="lidar_link">
        <sensor name="lidar" type="ray">
            <always_on>true</always_on>
            <visualize>true</visualize>
            <update_rate>5</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>360</samples>
                        <resolution>1.000000</resolution>
                        <min_angle>0.000000</min_angle>
                        <max_angle>6.280000</max_angle>
                    </horizontal>
                </scan>
                    <range>
                    <min>0.120000</min>
                    <max>6.0</max>
                    <resolution>0.015000</resolution>
                    </range>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.01</stddev>
                </noise>
            </ray>
            <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                    <remapping>~/out:=scan</remapping>
                </ros>
                <output_type>sensor_msgs/LaserScan</output_type>
                <frame_name>lidar_link</frame_name>
            </plugin>
        </sensor>
    </gazebo>

    <gazebo>
        <plugin name="object_controller" filename="libgazebo_ros_planar_move.so">
            <command_topic>cmd_vel</command_topic>
            <odometry_topic>odom</odometry_topic>
            <odometry_frame>odom</odometry_frame>
            <odometry_rate>20.0</odometry_rate>
            <robot_base_frame>base_footprint</robot_base_frame>
        </plugin>
    </gazebo>

</robot>